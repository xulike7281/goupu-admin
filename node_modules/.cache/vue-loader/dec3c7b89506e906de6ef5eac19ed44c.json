{"remainingRequest":"/Users/yangqin/Desktop/SamSung/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yangqin/Desktop/SamSung/src/components/echarts/line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yangqin/Desktop/SamSung/src/components/echarts/line.vue","mtime":1607567100794},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 按照使用到的功能添加组件导入，\nimport 'zrender/lib/svg/svg'\nrequire('echarts/lib/chart/line') // 按需导入折线组件\nrequire('echarts/lib/chart/effectScatter') // 拐点出闪烁，高亮\nrequire('echarts/lib/component/tooltip') // 提示组件\nrequire('echarts/lib/component/legend') // 图例组件\nrequire('echarts/lib/component/markPoint') // 标注组件\nrequire('echarts/lib/component/markLine') // svg模式\n\nexport default {\n    name: 'info-Line',\n    props: {\n        lineId: { // 折线图图表id\n            type: String,\n            default() {\n                return 'line'\n            }\n        },\n        height: { // 折线图高\n            type: String,\n            default() {\n                return '100%'\n            }\n        },\n        width: { // 折线图宽\n            type: String,\n            default() {\n                return '300px'\n            }\n        },\n        option: { // 折线图配置\n            type: Object,\n            required: true // 数据\n        },\n        loading: { // 图形加载\n            type: Boolean,\n            default() {\n                return false\n            }\n        },\n        enabledClick: { // 折线图是否配置点击事件\n            type: Boolean,\n            default: false\n        },\n        optRenderer: { // 渲染模式：canvas，svg\n            type: String,\n            default() {\n                return 'svg'\n            }\n        }\n    },\n    data() {\n        return {\n            line: null,\n            empty: false\n        }\n    },\n    computed: {\n        lineOption() {\n            return this.option.series\n        },\n        pieToolInfoStatus() {\n            let arr = Object.keys(this.toolInfo)\n            if (arr.length > 0) {\n                return true\n            }\n            return false\n        },\n        opts() {\n            return {\n                renderer: this.optRenderer\n            }\n        }\n    },\n    watch: {\n        lineOption() {\n            this.option.series.length === 0 ? this.empty = true : (this.option.series[0].data.length === 0 ? this.empty = true : this.empty = false)\n            if (this.empty) {\n                this.line.clear()\n                this.option.yAxis.data = []\n                this.option.xAxis.data = []\n                this.line.setOption(this.option)\n            } else {\n                this.drawLine()\n            }\n        }\n    },\n    mounted() {\n        if (this.line === null) {\n            this.line = this.$echarts.init(document.getElementById(this.lineId), null, this.opts)\n        }\n        /**\n         * 设置折线图点击事件\n         */\n        if (this.enabledClick) {\n            this.line.getZr().on('click', (params) => {\n                let pointInPixel = [params.offsetX, params.offsetY]\n                if (this.line.containPixel('grid', pointInPixel)) {\n                    let pointInGrid = this.line.convertFromPixel({ seriesIndex: 0 }, pointInPixel)\n                    let xIndex = pointInGrid[[0]]\n                    let op = this.line.getOption()\n                    let xValue = op.xAxis[0].data[xIndex]\n                    this.$emit('onDetail', xValue, op.series[1].data[xIndex].groupTime)\n                }\n            })\n        }\n        /**\n         * 设置图例最少一个选中\n         */\n        this.line.on('legendselectchanged', params => {\n            let legendObj = params.selected\n            let selectedNum = 0\n            for (const key in legendObj) {\n                if (legendObj.hasOwnProperty(key)) {\n                    const element = legendObj[key]\n                    if (element) {\n                        selectedNum += 1\n                    }\n                }\n            }\n            if (selectedNum === 0) {\n                legendObj[params.name] = true\n                this.option.legend.selected = legendObj\n                this.line.setOption(this.option)\n            }\n        })\n    },\n    beforeDestroy() {\n        if (this.line !== null && this.line !== '' && !(typeof this.line === 'undefined')) {\n            this.line.clear()\n        }\n    },\n    methods: {\n        /**\n         * 折线图\n         */\n        drawLine: function() {\n            if (this.line === null && this.line !== '' && !(typeof this.line === 'undefined')) {\n                this.line = this.$echarts.init(document.getElementById(this.lineId), null, this.opts)\n            }\n            this.line.setOption(this.option)\n        }\n    }\n}\n",{"version":3,"sources":["line.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"line.vue","sourceRoot":"src/components/echarts","sourcesContent":["\n<template>\n    <div class=\"module-container\" :style=\"{width:width}\">\n        <div\n            :id=\"lineId\"\n            class=\"module-body bg\"\n            :style=\"{height:height,width:width}\">\n        </div>\n    </div>\n</template>\n<script>\n// 按照使用到的功能添加组件导入，\nimport 'zrender/lib/svg/svg'\nrequire('echarts/lib/chart/line') // 按需导入折线组件\nrequire('echarts/lib/chart/effectScatter') // 拐点出闪烁，高亮\nrequire('echarts/lib/component/tooltip') // 提示组件\nrequire('echarts/lib/component/legend') // 图例组件\nrequire('echarts/lib/component/markPoint') // 标注组件\nrequire('echarts/lib/component/markLine') // svg模式\n\nexport default {\n    name: 'info-Line',\n    props: {\n        lineId: { // 折线图图表id\n            type: String,\n            default() {\n                return 'line'\n            }\n        },\n        height: { // 折线图高\n            type: String,\n            default() {\n                return '100%'\n            }\n        },\n        width: { // 折线图宽\n            type: String,\n            default() {\n                return '300px'\n            }\n        },\n        option: { // 折线图配置\n            type: Object,\n            required: true // 数据\n        },\n        loading: { // 图形加载\n            type: Boolean,\n            default() {\n                return false\n            }\n        },\n        enabledClick: { // 折线图是否配置点击事件\n            type: Boolean,\n            default: false\n        },\n        optRenderer: { // 渲染模式：canvas，svg\n            type: String,\n            default() {\n                return 'svg'\n            }\n        }\n    },\n    data() {\n        return {\n            line: null,\n            empty: false\n        }\n    },\n    computed: {\n        lineOption() {\n            return this.option.series\n        },\n        pieToolInfoStatus() {\n            let arr = Object.keys(this.toolInfo)\n            if (arr.length > 0) {\n                return true\n            }\n            return false\n        },\n        opts() {\n            return {\n                renderer: this.optRenderer\n            }\n        }\n    },\n    watch: {\n        lineOption() {\n            this.option.series.length === 0 ? this.empty = true : (this.option.series[0].data.length === 0 ? this.empty = true : this.empty = false)\n            if (this.empty) {\n                this.line.clear()\n                this.option.yAxis.data = []\n                this.option.xAxis.data = []\n                this.line.setOption(this.option)\n            } else {\n                this.drawLine()\n            }\n        }\n    },\n    mounted() {\n        if (this.line === null) {\n            this.line = this.$echarts.init(document.getElementById(this.lineId), null, this.opts)\n        }\n        /**\n         * 设置折线图点击事件\n         */\n        if (this.enabledClick) {\n            this.line.getZr().on('click', (params) => {\n                let pointInPixel = [params.offsetX, params.offsetY]\n                if (this.line.containPixel('grid', pointInPixel)) {\n                    let pointInGrid = this.line.convertFromPixel({ seriesIndex: 0 }, pointInPixel)\n                    let xIndex = pointInGrid[[0]]\n                    let op = this.line.getOption()\n                    let xValue = op.xAxis[0].data[xIndex]\n                    this.$emit('onDetail', xValue, op.series[1].data[xIndex].groupTime)\n                }\n            })\n        }\n        /**\n         * 设置图例最少一个选中\n         */\n        this.line.on('legendselectchanged', params => {\n            let legendObj = params.selected\n            let selectedNum = 0\n            for (const key in legendObj) {\n                if (legendObj.hasOwnProperty(key)) {\n                    const element = legendObj[key]\n                    if (element) {\n                        selectedNum += 1\n                    }\n                }\n            }\n            if (selectedNum === 0) {\n                legendObj[params.name] = true\n                this.option.legend.selected = legendObj\n                this.line.setOption(this.option)\n            }\n        })\n    },\n    beforeDestroy() {\n        if (this.line !== null && this.line !== '' && !(typeof this.line === 'undefined')) {\n            this.line.clear()\n        }\n    },\n    methods: {\n        /**\n         * 折线图\n         */\n        drawLine: function() {\n            if (this.line === null && this.line !== '' && !(typeof this.line === 'undefined')) {\n                this.line = this.$echarts.init(document.getElementById(this.lineId), null, this.opts)\n            }\n            this.line.setOption(this.option)\n        }\n    }\n}\n</script>\n"]}]}