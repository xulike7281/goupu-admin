{"remainingRequest":"/Users/yangqin/Desktop/SamSung/node_modules/babel-loader/lib/index.js!/Users/yangqin/Desktop/SamSung/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yangqin/Desktop/SamSung/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yangqin/Desktop/SamSung/node_modules/vue-echarts/components/ECharts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yangqin/Desktop/SamSung/node_modules/vue-echarts/components/ECharts.vue","mtime":499162500000},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangqin/Desktop/SamSung/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport echarts from 'echarts/lib/echarts';\nimport debounce from 'lodash/debounce';\nimport { addListener, removeListener } from 'resize-detector';\nvar INIT_TRIGGERS = ['theme', 'initOptions', 'autoresize'];\nvar REWATCH_TRIGGERS = ['manualUpdate', 'watchShallow'];\nexport default {\n  props: {\n    options: Object,\n    theme: [String, Object],\n    initOptions: Object,\n    group: String,\n    autoresize: Boolean,\n    watchShallow: Boolean,\n    manualUpdate: Boolean\n  },\n  data: function data() {\n    return {\n      lastArea: 0\n    };\n  },\n  watch: {\n    group: function group(_group) {\n      this.chart.group = _group;\n    }\n  },\n  methods: {\n    // provide an explicit merge option method\n    mergeOptions: function mergeOptions(options, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = options;\n      }\n\n      if (!this.chart) {\n        this.init(options);\n      } else {\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate);\n      }\n    },\n    // just delegates ECharts methods to Vue component\n    // use explicit params to reduce transpiled size for now\n    appendData: function appendData(params) {\n      this.delegateMethod('appendData', params);\n    },\n    resize: function resize(options) {\n      this.delegateMethod('resize', options);\n    },\n    dispatchAction: function dispatchAction(payload) {\n      this.delegateMethod('dispatchAction', payload);\n    },\n    convertToPixel: function convertToPixel(finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value);\n    },\n    convertFromPixel: function convertFromPixel(finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value);\n    },\n    containPixel: function containPixel(finder, value) {\n      return this.delegateMethod('containPixel', finder, value);\n    },\n    showLoading: function showLoading(type, options) {\n      this.delegateMethod('showLoading', type, options);\n    },\n    hideLoading: function hideLoading() {\n      this.delegateMethod('hideLoading');\n    },\n    getDataURL: function getDataURL(options) {\n      return this.delegateMethod('getDataURL', options);\n    },\n    getConnectedDataURL: function getConnectedDataURL(options) {\n      return this.delegateMethod('getConnectedDataURL', options);\n    },\n    clear: function clear() {\n      this.delegateMethod('clear');\n    },\n    dispose: function dispose() {\n      this.delegateMethod('dispose');\n    },\n    delegateMethod: function delegateMethod(name) {\n      var _this$chart;\n\n      if (!this.chart) {\n        this.init();\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_this$chart = this.chart)[name].apply(_this$chart, args);\n    },\n    delegateGet: function delegateGet(methodName) {\n      if (!this.chart) {\n        this.init();\n      }\n\n      return this.chart[methodName]();\n    },\n    getArea: function getArea() {\n      return this.$el.offsetWidth * this.$el.offsetHeight;\n    },\n    init: function init(options) {\n      var _this = this;\n\n      if (this.chart) {\n        return;\n      }\n\n      var chart = echarts.init(this.$el, this.theme, this.initOptions);\n\n      if (this.group) {\n        chart.group = this.group;\n      }\n\n      chart.setOption(options || this.manualOptions || this.options || {}, true);\n      Object.keys(this.$listeners).forEach(function (event) {\n        var handler = _this.$listeners[event];\n\n        if (event.indexOf('zr:') === 0) {\n          chart.getZr().on(event.slice(3), handler);\n        } else {\n          chart.on(event, handler);\n        }\n      });\n\n      if (this.autoresize) {\n        this.lastArea = this.getArea();\n        this.__resizeHandler = debounce(function () {\n          if (_this.lastArea === 0) {\n            // emulate initial render for initially hidden charts\n            _this.mergeOptions({}, true);\n\n            _this.resize();\n\n            _this.mergeOptions(_this.options || _this.manualOptions || {}, true);\n          } else {\n            _this.resize();\n          }\n\n          _this.lastArea = _this.getArea();\n        }, 100, {\n          leading: true\n        });\n        addListener(this.$el, this.__resizeHandler);\n      }\n\n      Object.defineProperties(this, {\n        // Only recalculated when accessed from JavaScript.\n        // Won't update DOM on value change because getters\n        // don't depend on reactive values\n        width: {\n          configurable: true,\n          get: function get() {\n            return _this.delegateGet('getWidth');\n          }\n        },\n        height: {\n          configurable: true,\n          get: function get() {\n            return _this.delegateGet('getHeight');\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: function get() {\n            return !!_this.delegateGet('isDisposed');\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: function get() {\n            return _this.delegateGet('getOption');\n          }\n        }\n      });\n      this.chart = chart;\n    },\n    initOptionsWatcher: function initOptionsWatcher() {\n      var _this2 = this;\n\n      if (this.__unwatchOptions) {\n        this.__unwatchOptions();\n\n        this.__unwatchOptions = null;\n      }\n\n      if (!this.manualUpdate) {\n        this.__unwatchOptions = this.$watch('options', function (val, oldVal) {\n          if (!_this2.chart && val) {\n            _this2.init();\n          } else {\n            // mutating `options` will lead to merging\n            // replacing it with new reference will lead to not merging\n            // eg.\n            // `this.options = Object.assign({}, this.options, { ... })`\n            // will trigger `this.chart.setOption(val, true)\n            // `this.options.title.text = 'Trends'`\n            // will trigger `this.chart.setOption(val, false)`\n            _this2.chart.setOption(val, val !== oldVal);\n          }\n        }, {\n          deep: !this.watchShallow\n        });\n      }\n    },\n    destroy: function destroy() {\n      if (this.autoresize) {\n        removeListener(this.$el, this.__resizeHandler);\n      }\n\n      this.dispose();\n      this.chart = null;\n    },\n    refresh: function refresh() {\n      if (this.chart) {\n        this.destroy();\n        this.init();\n      }\n    }\n  },\n  created: function created() {\n    var _this3 = this;\n\n    this.initOptionsWatcher();\n    INIT_TRIGGERS.forEach(function (prop) {\n      _this3.$watch(prop, function () {\n        _this3.refresh();\n      }, {\n        deep: true\n      });\n    });\n    REWATCH_TRIGGERS.forEach(function (prop) {\n      _this3.$watch(prop, function () {\n        _this3.initOptionsWatcher();\n\n        _this3.refresh();\n      });\n    });\n  },\n  mounted: function mounted() {\n    // auto init if `options` is already provided\n    if (this.options) {\n      this.init();\n    }\n  },\n  activated: function activated() {\n    if (this.autoresize) {\n      this.chart && this.chart.resize();\n    }\n  },\n  destroyed: function destroyed() {\n    if (this.chart) {\n      this.destroy();\n    }\n  },\n  connect: function connect(group) {\n    if (typeof group !== 'string') {\n      group = group.map(function (chart) {\n        return chart.chart;\n      });\n    }\n\n    echarts.connect(group);\n  },\n  disconnect: function disconnect(group) {\n    echarts.disConnect(group);\n  },\n  registerMap: function registerMap(mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas);\n  },\n  registerTheme: function registerTheme(name, theme) {\n    echarts.registerTheme(name, theme);\n  },\n  graphic: echarts.graphic\n};",{"version":3,"sources":["ECharts.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"echarts\" />\n</template>\n\n<style>\n.echarts {\n  width: 600px;\n  height: 400px;\n}\n</style>\n\n<script>\nimport echarts from 'echarts/lib/echarts'\nimport debounce from 'lodash/debounce'\nimport { addListener, removeListener } from 'resize-detector'\n\nconst INIT_TRIGGERS = ['theme', 'initOptions', 'autoresize']\nconst REWATCH_TRIGGERS = ['manualUpdate', 'watchShallow']\n\nexport default {\n  props: {\n    options: Object,\n    theme: [String, Object],\n    initOptions: Object,\n    group: String,\n    autoresize: Boolean,\n    watchShallow: Boolean,\n    manualUpdate: Boolean\n  },\n  data () {\n    return {\n      lastArea: 0\n    }\n  },\n  watch: {\n    group (group) {\n      this.chart.group = group\n    }\n  },\n  methods: {\n    // provide an explicit merge option method\n    mergeOptions (options, notMerge, lazyUpdate) {\n      if (this.manualUpdate) {\n        this.manualOptions = options\n      }\n\n      if (!this.chart) {\n        this.init(options)\n      } else {\n        this.delegateMethod('setOption', options, notMerge, lazyUpdate)\n      }\n    },\n    // just delegates ECharts methods to Vue component\n    // use explicit params to reduce transpiled size for now\n    appendData (params) {\n      this.delegateMethod('appendData', params)\n    },\n    resize (options) {\n      this.delegateMethod('resize', options)\n    },\n    dispatchAction (payload) {\n      this.delegateMethod('dispatchAction', payload)\n    },\n    convertToPixel (finder, value) {\n      return this.delegateMethod('convertToPixel', finder, value)\n    },\n    convertFromPixel (finder, value) {\n      return this.delegateMethod('convertFromPixel', finder, value)\n    },\n    containPixel (finder, value) {\n      return this.delegateMethod('containPixel', finder, value)\n    },\n    showLoading (type, options) {\n      this.delegateMethod('showLoading', type, options)\n    },\n    hideLoading () {\n      this.delegateMethod('hideLoading')\n    },\n    getDataURL (options) {\n      return this.delegateMethod('getDataURL', options)\n    },\n    getConnectedDataURL (options) {\n      return this.delegateMethod('getConnectedDataURL', options)\n    },\n    clear () {\n      this.delegateMethod('clear')\n    },\n    dispose () {\n      this.delegateMethod('dispose')\n    },\n    delegateMethod (name, ...args) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[name](...args)\n    },\n    delegateGet (methodName) {\n      if (!this.chart) {\n        this.init()\n      }\n      return this.chart[methodName]()\n    },\n    getArea () {\n      return this.$el.offsetWidth * this.$el.offsetHeight\n    },\n    init (options) {\n      if (this.chart) {\n        return\n      }\n\n      const chart = echarts.init(this.$el, this.theme, this.initOptions)\n\n      if (this.group) {\n        chart.group = this.group\n      }\n\n      chart.setOption(options || this.manualOptions || this.options || {}, true)\n\n      Object.keys(this.$listeners).forEach(event => {\n        const handler = this.$listeners[event]\n\n        if (event.indexOf('zr:') === 0) {\n          chart.getZr().on(event.slice(3), handler)\n        } else {\n          chart.on(event, handler)\n        }\n      })\n\n      if (this.autoresize) {\n        this.lastArea = this.getArea()\n        this.__resizeHandler = debounce(\n          () => {\n            if (this.lastArea === 0) {\n              // emulate initial render for initially hidden charts\n              this.mergeOptions({}, true)\n              this.resize()\n              this.mergeOptions(this.options || this.manualOptions || {}, true)\n            } else {\n              this.resize()\n            }\n            this.lastArea = this.getArea()\n          },\n          100,\n          { leading: true }\n        )\n        addListener(this.$el, this.__resizeHandler)\n      }\n\n      Object.defineProperties(this, {\n        // Only recalculated when accessed from JavaScript.\n        // Won't update DOM on value change because getters\n        // don't depend on reactive values\n        width: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getWidth')\n          }\n        },\n        height: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getHeight')\n          }\n        },\n        isDisposed: {\n          configurable: true,\n          get: () => {\n            return !!this.delegateGet('isDisposed')\n          }\n        },\n        computedOptions: {\n          configurable: true,\n          get: () => {\n            return this.delegateGet('getOption')\n          }\n        }\n      })\n\n      this.chart = chart\n    },\n    initOptionsWatcher () {\n      if (this.__unwatchOptions) {\n        this.__unwatchOptions()\n        this.__unwatchOptions = null\n      }\n\n      if (!this.manualUpdate) {\n        this.__unwatchOptions = this.$watch(\n          'options',\n          (val, oldVal) => {\n            if (!this.chart && val) {\n              this.init()\n            } else {\n              // mutating `options` will lead to merging\n              // replacing it with new reference will lead to not merging\n              // eg.\n              // `this.options = Object.assign({}, this.options, { ... })`\n              // will trigger `this.chart.setOption(val, true)\n              // `this.options.title.text = 'Trends'`\n              // will trigger `this.chart.setOption(val, false)`\n              this.chart.setOption(val, val !== oldVal)\n            }\n          },\n          { deep: !this.watchShallow }\n        )\n      }\n    },\n    destroy () {\n      if (this.autoresize) {\n        removeListener(this.$el, this.__resizeHandler)\n      }\n      this.dispose()\n      this.chart = null\n    },\n    refresh () {\n      if (this.chart) {\n        this.destroy()\n        this.init()\n      }\n    }\n  },\n  created () {\n    this.initOptionsWatcher()\n\n    INIT_TRIGGERS.forEach(prop => {\n      this.$watch(\n        prop,\n        () => {\n          this.refresh()\n        },\n        { deep: true }\n      )\n    })\n\n    REWATCH_TRIGGERS.forEach(prop => {\n      this.$watch(prop, () => {\n        this.initOptionsWatcher()\n        this.refresh()\n      })\n    })\n  },\n  mounted () {\n    // auto init if `options` is already provided\n    if (this.options) {\n      this.init()\n    }\n  },\n  activated () {\n    if (this.autoresize) {\n      this.chart && this.chart.resize()\n    }\n  },\n  destroyed () {\n    if (this.chart) {\n      this.destroy()\n    }\n  },\n  connect (group) {\n    if (typeof group !== 'string') {\n      group = group.map(chart => chart.chart)\n    }\n    echarts.connect(group)\n  },\n  disconnect (group) {\n    echarts.disConnect(group)\n  },\n  registerMap (mapName, geoJSON, specialAreas) {\n    echarts.registerMap(mapName, geoJSON, specialAreas)\n  },\n  registerTheme (name, theme) {\n    echarts.registerTheme(name, theme)\n  },\n  graphic: echarts.graphic\n}\n</script>\n"],"sourceRoot":"node_modules/vue-echarts/components"}]}